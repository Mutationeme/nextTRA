{"version":3,"sources":["time.js","request/index.js","components/List/list.js","App.js","serviceWorker.js","index.js"],"names":["timeFormat","date","year","getFullYear","month","getMonth","dat","getDate","hour","getHours","minute","getMinutes","URL","getTrainByDate","info","a","reqOption","method","URLi","departure","arrival","split","fetch","response","json","console","error","List","props","textAlignCenter","textAlign","trains","map","train","ListGroup","horizontal","key","TrainInfo","TrainNo","style","margin","Item","padding","width","backgroundColor","TrainTypeName","Zh_tw","StopTimes","StationName","DepartureTime","ArrivalTime","line","TripLine","departureTime","arrivalTime","timeLag","parseInt","travelTime","App","useState","setDepart","setArriv","county","setCounty","stationList","setList","Date","time","setTime","result","setResult","bsearch","target","start","end","mid","Math","floor","id","stations","Stations","StationID","Container","Form","Row","Group","as","Col","Label","Control","onChange","event","value","counties","required","data","i","County","res","length","InputGroup","type","min","slice","max","days","setDate","addDay","Append","Button","variant","onClick","xs","size","temp","then","TrainTimetables","forEach","trainTime","TrainDate","getTime","push","sort","b","position","left","bottom","color","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.94ecf6fd.chunk.js","sourcesContent":["const timeFormat = (date) => {\n    let year = date.getFullYear();\n    let month = date.getMonth() + 1;\n    if (month < 10) {\n        month = '0' + month;\n    }\n    let dat = date.getDate();\n    if (dat < 10) {\n        dat = '0' + dat;\n    }\n    let hour = date.getHours();\n    if (hour < 10) {\n        hour = '0' + hour;\n    }\n    let minute = date.getMinutes();\n    if (minute < 10) {\n        minute = '0' + minute;\n    }\n\n    return year + '-' + month + '-' + dat + 'T' + hour + ':' + minute;\n}\n\nexport {timeFormat};","import { timeFormat } from '../time.js';\n\nconst URL = \"https://ptx.transportdata.tw/MOTC/v3/Rail/TRA/\";\n\nconst getStations = async () => {\n    let reqOption = {\n        method: \"GET\"\n    };\n    let URLi = URL + \"Station?$format=JSON\";\n\n    try {\n        let response = await fetch(URLi, reqOption);\n        if (!response.ok) {\n            throw Error(response.status);\n        }\n        else {\n            return response.json();\n        }\n    }\n    catch (err) {\n        console.error(\"error: \" + err);\n    }\n}\n\nconst getTrainByDate = async (info) => {\n    /*\n    info:{\n        departure: \"String\",\n        arrival: \"String\"\n        date: \"Date\"\n    }\n    */\n    let reqOption = {\n        method: \"GET\"\n    };\n    let URLi = URL + \"DailyTrainTimetable/OD/\" + info.departure + \"/to/\" + info.arrival + \"/\" + timeFormat(info.date).split('T')[0] + \"?$format=JSON\";\n\n    try {\n        let response = await fetch(URLi, reqOption);\n        return response.json();\n    }\n    catch (error) {\n        console.error(error);\n    }\n}\n\nexport { getTrainByDate, getStations };","import React from 'react';\nimport { ListGroup } from 'react-bootstrap';\n\nfunction List(props) {\n    function travelTime(train) {\n        let departureTime = train.StopTimes[0].DepartureTime.split(':');\n        let arrivalTime = train.StopTimes[1].ArrivalTime.split(':');\n\n        let timeLag = parseInt(arrivalTime[0], 10) * 60 + parseInt(arrivalTime[1], 10) - parseInt(departureTime[0], 10) * 60 - parseInt(departureTime[1], 10);\n\n        if (timeLag < 0) {\n            timeLag += 24 * 60;\n        }\n        return (\n            <div>\n                <div style={textAlignCenter}>\n                    {\n                        (parseInt(timeLag / 60) < 10 ? (\"0\" + parseInt(timeLag / 60)) : parseInt(timeLag / 60)) + \"時\"\n                    }\n                </div>\n                <div style={textAlignCenter}>\n                    {timeLag % 60 + \"分\"}\n                </div>\n            </div>\n        );\n    }\n\n    const textAlignCenter = {\n        textAlign: \"center\"\n    }\n\n    return (\n        <div>\n            {\n                props.trains.map((train) => {\n                    return (\n                        <ListGroup horizontal key={train.TrainInfo.TrainNo} style={{ margin: \"1vh 0\" }}>\n                            <ListGroup.Item style={{ padding: \"0.5rem\", width: \"25%\", backgroundColor:\"#f2f2f2\" }}>\n                                <div style={textAlignCenter}>{train.TrainInfo.TrainTypeName.Zh_tw.split('(')[0]}</div>\n                                <div style={textAlignCenter}>{train.TrainInfo.TrainNo}</div>\n                            </ListGroup.Item>\n                            <ListGroup.Item style={{ padding: \"0.5rem\", width: \"20%\", backgroundColor:\"#f2f2f2\" }}>\n                                <div style={textAlignCenter}>{train.StopTimes[0].StationName.Zh_tw}</div>\n                                <div style={textAlignCenter}>{train.StopTimes[0].DepartureTime}</div>\n                            </ListGroup.Item>\n                            <ListGroup.Item style={{ padding: \"0.5rem\", width: \"20%\", backgroundColor:\"#f2f2f2\" }}>\n                                <div style={textAlignCenter}>{train.StopTimes[1].StationName.Zh_tw}</div>\n                                <div style={textAlignCenter}>{train.StopTimes[1].ArrivalTime}</div>\n                            </ListGroup.Item>\n                            <ListGroup.Item style={{ padding: \"0.5rem\", width: \"10%\", backgroundColor:\"#f2f2f2\" }}>\n                                <div style={textAlignCenter}>\n                                    {\n                                        (() => {\n                                            let line = train.TrainInfo.TripLine;\n                                            if (line === 1) {\n                                                return \"山\";\n                                            }\n                                            else if (line === 2) {\n                                                return \"海\"\n                                            }\n                                            else {\n                                                return \" \";\n                                            }\n                                        })()\n                                    }\n                                </div>\n                            </ListGroup.Item>\n                            <ListGroup.Item style={{ padding: \"0.5rem\", width: \"25%\", backgroundColor:\"#f2f2f2\" }}>\n                                {\n                                    travelTime(train)\n                                }\n                            </ListGroup.Item>\n                        </ListGroup>\n                    );\n                })\n            }\n        </div>\n    );\n}\n\nexport default List;","import React, { useState, /*useEffect*/ } from 'react';\nimport { Form, Col, Container, Button, InputGroup } from 'react-bootstrap';\n\nimport { getTrainByDate } from './request/index.js';\nimport { timeFormat } from './time.js';\nimport counties from './stationInfo/counties.json';\nimport stations from './stationInfo/stations.json';\n\nimport List from './components/List/list.js';\n\nfunction App() {\n    const [departure, setDepart] = useState(\"\");\n    const [arrival, setArriv] = useState(\"\");\n    const [county, setCounty] = useState([\"\", \"\"]);\n    const [stationList, setList] = useState([[], []]);\n    const [time, setTime] = useState(new Date());\n    const [result, setResult] = useState([]);\n\n    function bsearch(target, start, end) {\n        //Binary search\n        if (start > end) {\n            return -1;\n        }\n\n        let mid = Math.floor((start + end) / 2);\n        let id = stations.Stations[mid].StationID;\n\n        if (id === target) {\n            return mid;\n        }\n        else if (parseInt(id, 10) < parseInt(target, 10)) {\n            return bsearch(target, mid + 1, end);\n        }\n        else {\n            return bsearch(target, start, mid - 1);\n        }\n    }\n\n\n\n    function addDay(date, days) {\n        //PTX API only provide date within 60 days\n        let result = new Date(date);\n        result.setDate(result.getDate() + days);\n        return result;\n    }\n\n    function handleSubmit() {\n        let arg = {\n            departure: departure,\n            arrival: arrival,\n            date: time\n        };\n        let trains = [];\n        getTrainByDate(arg).then((res) => {\n            if (!res.TrainTimetables) {\n                return;\n            }\n            res.TrainTimetables.forEach((train) => {\n                let trainTime = res.TrainDate + \"T\" + train.StopTimes[0].DepartureTime;\n                let timeLag = (new Date(trainTime)).getTime() - time.getTime();\n\n                if (timeLag >= 0) {\n                    trains.push({\n                        timeLag: timeLag,\n                        ...train\n                    });\n                }\n            })\n            trains.sort((a, b) => {\n                return a.timeLag - b.timeLag;\n            })\n            setResult(trains);\n        })\n    }\n    const footerStyle = {\n        position: \"relative\",\n        left: \"0\",\n        bottom: \"0\",\n        width: \"100%\",\n        textAlign: \"cneter\",\n        color: \"lightgray\"\n    };\n    /*\n    useEffect(() => {\n        console.log(\"Dep: \" + departure);\n        console.log(\"Arr: \" + arrival);\n        console.log(\"Tim: \" + time);\n        console.log(\"res: \"+result);\n    }, [departure, arrival, time, result])\n    */\n    return (\n        <Container>\n            <Form>\n                <Form.Row>\n                    <Form.Group as={Col}>\n                        <Form.Label>From</Form.Label>\n                        <Form.Control as=\"select\"\n                            onChange={(event) => {\n                                if (event.target.value !== \"\") {\n                                    setCounty([event.target.value, county[1]]);\n                                    setList([counties[event.target.value].stations, stationList[1]]);\n                                }\n                                else {\n                                    setCounty([null, county[1]]);\n                                    setList([[], stationList[1]]);\n                                }\n                                setDepart(\"\");\n                            }}\n                            value={county[0]}\n                            required\n                        >\n                            <option value=\"\"></option>\n                            {\n                                counties.map((data, i) => {\n                                    return (\n                                        <option key={data.County} value={i}>{data.County}</option>\n                                    );\n                                })\n                            }\n                        </Form.Control>\n                    </Form.Group>\n                    <Form.Group as={Col}>\n                        <Form.Label>&nbsp;</Form.Label>\n                        <Form.Control as=\"select\"\n                            onChange={(event) => {\n                                setDepart(event.target.value);\n                            }}\n                            value={departure}\n                            required\n                        >\n                            <option value=\"\"></option>\n                            {\n                                stationList[0].map((data) => {\n                                    let res = bsearch(data, 0, stations.Stations.length - 1);\n\n                                    if (res >= 0) {\n                                        return (\n                                            <option key={data} value={data}>{stations.Stations[res].StationName.Zh_tw}</option>\n                                        );\n                                    }\n                                    else {\n                                        return null;\n                                    }\n                                })\n                            }\n                        </Form.Control>\n                    </Form.Group>\n                </Form.Row>\n                <Form.Row>\n                    <Form.Group as={Col}>\n                        <Form.Label>To</Form.Label>\n                        <Form.Control as=\"select\"\n                            onChange={(event) => {\n                                if (event.target.value !== \"\") {\n                                    setList([stationList[0], counties[event.target.value].stations]);\n                                    setCounty([county[0], event.target.value]);\n                                }\n                                else {\n                                    setList([stationList[0], []]);\n                                    setCounty([county[0], null]);\n                                }\n                                setArriv(\"\");\n                            }}\n                            value={county[1]}\n                            required\n                        >\n                            <option value=\"\"></option>\n                            {\n                                counties.map((data, i) => {\n                                    return (\n                                        <option key={data.County} value={i}>{data.County}</option>\n                                    );\n                                })\n                            }\n                        </Form.Control>\n                    </Form.Group>\n\n\n                    <Form.Group as={Col}>\n                        <Form.Label>&nbsp;</Form.Label>\n                        <Form.Control as=\"select\"\n                            onChange={(event) => {\n                                setArriv(event.target.value);\n                            }}\n                            value={arrival}\n                            required\n                        >\n                            <option value=\"\"></option>\n                            {\n                                stationList[1].map((data) => {\n                                    let res = bsearch(data, 0, stations.Stations.length - 1);\n\n                                    if (res > 0) {\n                                        return (\n                                            <option key={data} value={data}>{stations.Stations[res].StationName.Zh_tw}</option>\n                                        );\n                                    }\n                                    else {\n                                        return null;\n                                    }\n                                })\n                            }\n                        </Form.Control>\n                    </Form.Group>\n                </Form.Row>\n                <Form.Row>\n                    <Form.Group as={Col}>\n                        <Form.Label>Date</Form.Label>\n                        <InputGroup>\n                            <Form.Control\n                                type=\"datetime-local\"\n                                value={timeFormat(time)}\n                                min={timeFormat(new Date()).slice(0, 10) + \"T00:00\"}\n                                max={timeFormat(addDay(new Date(), 60)).slice(0, 10) + \"T23:59\"}\n                                onChange={(event) => {\n                                    setTime(new Date(event.target.value));\n                                }}\n                            />\n                            <InputGroup.Append>\n                                <Button type=\"button\" variant=\"outline-secondary\" onClick={() => { setTime(new Date()) }}>Now</Button>\n                            </InputGroup.Append>\n                        </InputGroup>\n                    </Form.Group>\n                </Form.Row>\n                <Form.Row>\n                    <Form.Group as={Col} xs=\"4\">\n                        <Form.Label>&nbsp;</Form.Label>\n                        <Button\n                            variant=\"outline-info\"\n                            type=\"button\"\n                            size=\"lg\"\n                            style={{ width: \"100%\" }}\n                            onClick={\n                                () => {\n                                    let temp = arrival;\n                                    setArriv(departure);\n                                    setDepart(temp);\n\n                                    temp = county[0];\n                                    setCounty([county[1], temp]);\n\n                                    temp = stationList[0];\n                                    setList([stationList[1], temp]);\n                                }\n                            }\n                        >\n                            互換\n                    </Button>\n                    </Form.Group>\n                    <Form.Group as={Col} >\n                        <Form.Label>&nbsp;</Form.Label>\n                        <Button\n                            variant=\"dark\"\n                            type=\"button\"\n                            size=\"lg\"\n                            style={{ width: \"100%\" }}\n                            onClick={handleSubmit}\n                        >\n                            查詢\n                    </Button>\n                    </Form.Group>\n                </Form.Row>\n            </Form >\n\n            <List trains={result} />\n\n            <div id=\"footer\" style={footerStyle}>\n                資料來源: 交通部PTX平臺/2020/v3\n            </div>\n        </Container>\n    );\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}